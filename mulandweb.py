#!/usr/bin/env python3
# coding: utf-8

from pathlib import Path
import os, tempfile, subprocess
import csv

class MulandException(Exception):
    pass

class ModelNotFound(MulandException):
    pass

class DependencyError(MulandException):
    pass

class Muland:
    '''Access Muland Application'''

    muland_binary = 'bin/muland'
    model_folder = 'model'
    work_folder = 'work'

    input_files = ['agents', 'agents_zones', 'bids_adjustments',
    'bids_functions', 'demand', 'demand_exogenous_cutoff',
    'real_estates_zones', 'rent_adjustments', 'rent_functions',
    'subsidies', 'supply', 'zones']

    output_files = ['bids', 'bh', 'location', 'location_probability',
    'rents']

    # Check if muland binary, model folder and work folder are in place
    if not os.access(work_folder, os.R_OK & os.W_OK):
        if os.access(work_folder, os.F_OK):
            raise DependencyError('Could not access work folder.')
        os.mkdir(work_folder)

    if not os.access(muland_binary, os.X_OK):
        raise DependencyError('Could not find muland binary.')

    if not os.access(model_folder, os.R_OK):
        raise DependencyError('Could not access model folder.')

    def __init__(self, model):
        '''Initialize Muland'''
        # Check if model exists
        model_folder = self.model_folder
        for file in self.input_files:
            filename = str(Path(model_folder, model, file + '.csv'))
            accessible = os.access(filename, os.R_OK)
            if not accessible:
                raise ModelNotFound('Specified model was not found.')

        # Set instance attributes
        self.model_dir = str(Path(model_folder, model))
        self.output_data = {}

    def _populate_working_dir(self, working_dir):
        '''Prepares data for Muland reading'''
        # Create input and output directories
        os.mkdir(str(Path(working_dir, 'input')))
        os.mkdir(str(Path(working_dir, 'output')))

        # Populate input directory
        model_folder = self.model_folder
        for file in self.input_files:
            model_file_path = str(Path(self.model_dir, file + '.csv').resolve())
            work_file_path = str(Path(working_dir, 'input', file + '.csv'))
            os.symlink(model_file_path, work_file_path)

    def _run_muland(self, working_dir):
        '''Run Muland on working dir'''
        proc = subprocess.Popen([self.muland_binary, working_dir])
        proc.wait()

    def _collect_data(self, working_dir):
        '''Collects data generated by Muland'''
        for name in self.output_files:
            output_data = []
            fullname = str(Path(working_dir, 'output', name + '.csv'))
            with open(fullname) as file:
                reader = csv.reader(file)
                next(reader)
                for row in reader:
                    output_data.append(tuple(row))
            self.output_data[name] = output_data

    def run(self):
        '''Runs Muland'''
        # Create data directory
        with tempfile.TemporaryDirectory(dir = self.work_folder) as working_dir:
            # Prepare directory
            self._populate_working_dir(working_dir)

            # Run Muland
            self._run_muland(working_dir)

            # Collect data
            self._collect_data(working_dir)
